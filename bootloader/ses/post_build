#!/bin/bash

## This script is intended to be called as a post-build action from SEGGER Embedded Studio

## Arguments
##  First arg:  $(ProjectDir)
##  Second arg: $(Configuration)
##  Third arg:  $(ProjectName)
##  Fourth arg: $(OutDir)
##  Fifth arg:  $(SolutionDir)
##  Sixth arg:  $(SolutionName)
##  Seventh arg: $(HardwareRevision)

set -x

# Read version information
source "$5/tools/version_defines"

# Output of the build
BOOTLOADER_PATH="$1/Output/$2/Exe/$3.hex"
OUTPUT_FILES="${BOOTLOADER_PATH}"

# Create the path to store the hex files in
OUTPUT_DIR="$5/${ARTIFACT_DIR}/$2"

# Create the directory to store the hex files in
mkdir -p "${OUTPUT_DIR}"
if [ $? -ne 0 ]; then
    echo "Error creating artifact path '${OUTPUT_DIR}': $?"
    exit 1
fi

# Copy files to the output directory
for i in ${OUTPUT_FILES}; do
    cp "$i" "${OUTPUT_DIR}"
    if [ $? -ne 0 ]; then
        echo "Error copying '${i}' to '${OUTPUT_DIR}': $?"
        exit 1
    fi
done

# Create a DFU upgrade file

case $2 in
debug)
    # Create a debug DFU update if we're in debug mode
    MODE="--debug-mode"
    ;;
release)
    MODE=""
    ;;
*)
    echo "Unsupported build configuration '$2', exiting"
    exit 1
    ;;
esac

# Generate a text string of the version
cat << EOT | gcc -xc -
#include <stdio.h>
#include "../version.h"
int main(int argc, char *argv[])
{
    printf("%d.%d.%d",VERSION_MAJOR,VERSION_MINOR,VERSION_SUB);
}
EOT
if [ ! -e ./a.out ]; then
    echo "Can't determine version, exiting"
    exit 1
fi
VERSION_STRING=$(./a.out)
rm ./a.out

IMAGE_NAME="bl_${VERSION_STRING}"
REVISION="${CI_COMMIT_SHORT_SHA:-$(git describe --no-match --always --abbrev=6 --dirty --tags --long)}"
BUILD_DATE="$(date "+%Y-%m-%d_%H-%M-%S")"
DFU_OUTPUT_FILE="$5/${ARTIFACT_DIR}/$6-r$7-${IMAGE_NAME}-$2-${REVISION}-${BUILD_DATE}.zip"
KEYFILE_PATH="$5/${KEYFILE}"

ARGS="${MODE} \
    --bootloader "${BOOTLOADER_PATH}" \
    --bootloader-version ${BOOTLOADER_VERSION} \
    --hw-version ${HW_VERSION} \
    --key-file "${KEYFILE_PATH}"
"

nrfutil pkg generate ${ARGS} \
    --sd-req ${SD_VERSION} \
    "${DFU_OUTPUT_FILE}"

if [ $? -ne 0 ]; then
    echo "Error creating DFU upgrade file '${DFU_OUTPUT_FILE}': $?"
    exit 1
else
    # Build argument file that will be used by tools/combine.linux.cmd to
    # create full (sd+bl+app) update package
    ARG_FILE="$5/${ARTIFACT_DIR}/$2-bl.arg"

    # First argument is the name of the image and its version.  The second is
    # the arguments to nrfutil to package that image
    echo ${IMAGE_NAME}:${ARGS} >> ${ARG_FILE}
fi
